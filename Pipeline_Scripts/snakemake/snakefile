ACTS = ["arg_comp", "arg_min_smax", "pcm_comp", ]
AERS = ["PD", "PI", ]
REGIONS = ["GLOBAL", "LND", "OCEAN"]
FIELDS = ["TS", "PS", "PRECL", ]

rule make_data:
    output:
        expand("data/{act}/{aer}/{act}_{aer}.{field}.2d_monthly.nc",
               act=ACTS, aer=AERS, field=FIELDS)
    message:
        "Generating dummy data"
    run:
        from itertools import product
        import os
        import xarray as xr
        import numpy as np
        import pandas as pd

        for act, aer, field in product(ACTS, AERS, FIELDS):
            out_dir = "data/{act}/{aer}/".format(act=act, aer=aer)
            out_fn = "{act}_{aer}.{field}.2d_monthly.nc".format(act=act, aer=aer, field=field)

            os.makedirs(out_dir, exist_ok=True)

            data = np.random.randn(20, 20, 5)
            lin = np.linspace(0, 1, 20)
            ds = xr.Dataset({field: (['x', 'y', 'time'], data)},
                            coords={'x': lin,
                                    'y': lin,
                                    'time': pd.date_range('2001-01-01', periods=5, freq='MS')})
            ds.to_netcdf(os.path.join(out_dir, out_fn))

rule global_avg:
    input:
        "data/{act}/{aer}/{act}_{aer}.{field}.2d_monthly.nc"
    output:
        temp("analysis/global_avg/{act}_{aer}.{field}.global_avg.nc")
    run:
        import xarray as xr
        ds = xr.open_dataset(input[0])
        ds.mean(["x", "y"]).to_netcdf(output[0])

rule global_avg_comparison:
    input:
        expand("analysis/global_avg/{act}_{{aer}}.{{field}}.global_avg.nc", act=ACTS)
    output:
        "figs/global_avg/{field}.{aer}.global_avg.png"
    params:
        field="{field}", aer="{aer}"
    run:
        import pandas as pd
        import xarray as xr
        import matplotlib.pyplot as plt

        all_data = []
        for fn in input:
            print(fn)
            all_data.append(xr.open_dataset(fn)[params['field']])
        all_data = (
            xr
            .concat(all_data, dim=pd.Index(ACTS, name="act"))
            .to_dataframe()
            .reset_index()
            .pivot("time", "act", params['field'])
        )

        all_data.plot()

        plt.savefig(output[0])

rule all_global_avgs:
    input:
        expand("figs/global_avg/{field}.{aer}.global_avg.png",
               field=FIELDS, aer=AERS)